<?php

use Illuminate\Support\Facades\Route;

/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
|
| Here is where you can register web routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| contains the "web" middleware group. Now create something great!
|
*/

/*
 * Доступные HTTP-методы маршрутизатора
Route::get($uri, $callback); - Получить данные - данный метод принимает значение строки запроса пользователя (метод, которым передаются данные когда мы обращаемся к странице по ссылке или набираем адрес вручную)
Route::post($uri, $callback); - Передать данные - метод используется, когда мы передаем данные а страницу методом POST через формы для заполнения и отправки
Route::put($uri, $callback); - Обновить данные - метод используется для обновления данных ресурса
Route::patch($uri, $callback);
Route::delete($uri, $callback); - Удалить данные - метод используется для удаления данных ресурса
Route::options($uri, $callback);
*/



/*Route::get('/', function () {
    return view('welcome');
});*/

/*Route::get ( '/', function () {
    return '<h1> Hello, world! </h1>';
} );*/

/*Route::get ( '/', function () {
    $res = 2 + 3;
    $name = 'John';
    return view ('home')->with ('var', $res); // 1-й вариант передачи данных в шаблон: Используем метод with, чтобы передать наши данные: передаем переменную 'var' со значением переменной $res
} );*/

/*Route::get ( '/', function () {
    $res = 2 + 3;
    $name = 'John';
    return view ('home', ['res' => $res, 'name' => $name]); // 2-й вариант передачи данных в шаблон: Используем ассоциативный массив для передачи данных в формате ключ => значение
} );*/

/*Route::get ( '/', function () {
    $res = 2 + 3;
    $name = 'John';
    return view ('home', compact ('res', 'name')); // 3-й вариант передачи данных в шаблон: Используем нативную функцию PHP compact для передачи данных (мы передаем в эту функцию в виде строк названия переменных)
} );*/

Route::get ( '/about', function () { // Маршрутизация для страницы "about" сайта
    return view ('about');
} );

/*Route::get ( '/contact', function () { // Маршрутизация для страницы "contact" сайта
    return view ('contact');
} );*/

/*Route::post ('/send-email', function () {
    if (!empty($_POST)) {
        dump ($_POST); // Для красивой распечатки данных в ларавель есть функция dump. Если нам нужно завершить выполнения кода после распечатки данных - мы используем функцию dd
    }
    return 'Send Email';
});*/

// 2. Если нам нужно, чтобы отправляемые данные из формы отправлялись на эту же страницу контактов, при этом передавались методом POST. В этом случае используются сразу два метода: у класса Route метод "match", где первым аргументом в виде массива мы указываем поддерживаемые методы, по которым будет доступна данная страница - методы 'post', 'get'. Вторым аргументом указываем uri страницы. Третий аргумент - коллбэкфункция с выводом представления
/*Route::match (['post', 'get'], '/contact', function () {
    if (!empty($_POST)) {
        dump ($_POST);
    }
    return view ('contact');
});*/

// Если нам нужен маршрут, который будет поддерживать все типы запросов (GET, POST, PUT, DELETE) - можно использовать метод "any" - данный маршрут будет доступен по любому запросу (GET, POST, PUT, DELETE)
/*Route::any ();*/

// 3. Использование именованных маршрутов - мы даем имя нашему маршруту - с помощью метода "name". В скобках указываем как мы хотим, чтобы наш маршрут назывался и это имя будет затем использовано во всех ссылках на данную страницу (ссылка будет корректно построена несмотря на то, что мы в запросе поменяем uri на '/contact2')
Route::match (['post', 'get'], '/contact', function () {
    if (!empty($_POST)) {
        dump ($_POST);
    }
    return view ('contact');
})->name ('contact');

// Если речь идет о статичных страницах /about, /contact итд., которые не предполагают получения и обработки данных из БД и мы захотим подключить такую страницу (вид) и ограничиться этим. В этом случае мы можем использовать для класса Route метод "view". На вход передаем uri адрес и название вида, который нужно подключить для данной страницы. Так же, при необходимости, мы можем на страницу передать какие-то данные в виде массива в виде ключа => значение
Route::view ('/test', 'test', ['test' => 'Test data']);

// Делаем редирект используя маршрутизацию. Для этого у класса "route" есть метод "redirect". Он принимает на вход параметры: uri (с которого нужно сделать редирект) и uri (куда нужно сделать редирект). По умолчанию передает статус страницы 302 (страница временно перемещена)
//Route::redirect ('/about', '/contact', 302);
//Route::redirect ('/about', '/contact', 301); // Страница перемещена постоянно
//Route::permanentRedirect ('/about', '/contact'); // Аналог предыдущей записи. По умолчанию выдается статус 301


