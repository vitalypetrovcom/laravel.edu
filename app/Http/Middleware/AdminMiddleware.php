<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

/*
 * Посредники (middleware) (https://laravel.com/docs/8.x/middleware)
 * Посредник обеспечивает удобный механизм для проверки и фильтрации HTTP-запросов, поступающих в ваше приложение. Например, в Laravel уже содержится посредник, проверяющий аутентификацию пользователя вашего приложения. Если пользователь не аутентифицирован, то посредник перенаправит пользователя на экран входа в ваше приложение. Однако, если пользователь аутентифицирован, то посредник позволит запросу продолжить работу в приложении.
 * Посредник может быть написан для выполнения различных задач помимо аутентификации. Например, посредник для ведения журнала может регистрировать все входящие запросы вашего приложения. В состав фреймворка Laravel уже входят несколько посредников, включая посредник для аутентификации и посредник для защиты от CSRF. Все эти посредники находится в каталоге app/Http/Middleware.
*/


class AdminMiddleware { // Данный посредник должен обрабатывать все маршруты админской части (мы ограничили доступ к админской части). Сначала данный посредник нужно зарегистрировать в файле app/Http/Kernel.php.


    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure(\Illuminate\Http\Request): (\Illuminate\Http\Response|\Illuminate\Http\RedirectResponse)  $next
     * @return \Illuminate\Http\Response|\Illuminate\Http\RedirectResponse
     */
    public function handle(Request $request, Closure $next)
    {
        // Проверим, является ли пользователь авторизованным и имеет ли пользователь свойство 'is_admin' = 1
        if (Auth::check() && Auth::user ()->is_admin == 1) {

            // Если пользователь проходит данные проверки, тогда мы передаем данный запрос дальше
            return $next($request);
        }
        /*// Если нет, тогда мы перенаправляем его на страницу авторизации
        return redirect ()->route ('login.create');*/
        // ИЛИ перенаправляем его на страницу ошибки 404 как будто здесь ничего нет (скрываем страницу для входа в админ-панель) используя функцию-хелпер abort и передаем ей код 404. Она остановит выполнение скрипта и пользователь увидит ошибку 404
        abort (404);

    }
}
